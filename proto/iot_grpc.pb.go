// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package iot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	WatchStatus(ctx context.Context, in *WatchState, opts ...grpc.CallOption) (*WatchStateReply, error)
	WatchUpdate(ctx context.Context, in *WatchUpdates, opts ...grpc.CallOption) (*WatchStateReply, error)
	GetProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error)
	SetFileInfo(ctx context.Context, in *SetFileInfoRequest, opts ...grpc.CallOption) (*SetFileInfoReply, error)
	FindSubFile(ctx context.Context, in *GetFindFileInfoRequest, opts ...grpc.CallOption) (*GetFindFileInReply, error)
	PutFileInfo(ctx context.Context, in *PutFileInfoRequest, opts ...grpc.CallOption) (*PutFileInfoReply, error)
	DeleteFileInfo(ctx context.Context, in *RemoveFileInfoRequest, opts ...grpc.CallOption) (*RemoveFileInfoReply, error)
	SubFileCount(ctx context.Context, in *SubFileCountRequest, opts ...grpc.CallOption) (*SubFileCountReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) WatchStatus(ctx context.Context, in *WatchState, opts ...grpc.CallOption) (*WatchStateReply, error) {
	out := new(WatchStateReply)
	err := c.cc.Invoke(ctx, "/proto.Greeter/WatchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) WatchUpdate(ctx context.Context, in *WatchUpdates, opts ...grpc.CallOption) (*WatchStateReply, error) {
	out := new(WatchStateReply)
	err := c.cc.Invoke(ctx, "/proto.Greeter/WatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error) {
	out := new(ProjectReply)
	err := c.cc.Invoke(ctx, "/proto.Greeter/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SetFileInfo(ctx context.Context, in *SetFileInfoRequest, opts ...grpc.CallOption) (*SetFileInfoReply, error) {
	out := new(SetFileInfoReply)
	err := c.cc.Invoke(ctx, "/proto.Greeter/SetFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) FindSubFile(ctx context.Context, in *GetFindFileInfoRequest, opts ...grpc.CallOption) (*GetFindFileInReply, error) {
	out := new(GetFindFileInReply)
	err := c.cc.Invoke(ctx, "/proto.Greeter/FindSubFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) PutFileInfo(ctx context.Context, in *PutFileInfoRequest, opts ...grpc.CallOption) (*PutFileInfoReply, error) {
	out := new(PutFileInfoReply)
	err := c.cc.Invoke(ctx, "/proto.Greeter/PutFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DeleteFileInfo(ctx context.Context, in *RemoveFileInfoRequest, opts ...grpc.CallOption) (*RemoveFileInfoReply, error) {
	out := new(RemoveFileInfoReply)
	err := c.cc.Invoke(ctx, "/proto.Greeter/DeleteFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SubFileCount(ctx context.Context, in *SubFileCountRequest, opts ...grpc.CallOption) (*SubFileCountReply, error) {
	out := new(SubFileCountReply)
	err := c.cc.Invoke(ctx, "/proto.Greeter/SubFileCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	WatchStatus(context.Context, *WatchState) (*WatchStateReply, error)
	WatchUpdate(context.Context, *WatchUpdates) (*WatchStateReply, error)
	GetProject(context.Context, *ProjectRequest) (*ProjectReply, error)
	SetFileInfo(context.Context, *SetFileInfoRequest) (*SetFileInfoReply, error)
	FindSubFile(context.Context, *GetFindFileInfoRequest) (*GetFindFileInReply, error)
	PutFileInfo(context.Context, *PutFileInfoRequest) (*PutFileInfoReply, error)
	DeleteFileInfo(context.Context, *RemoveFileInfoRequest) (*RemoveFileInfoReply, error)
	SubFileCount(context.Context, *SubFileCountRequest) (*SubFileCountReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) WatchStatus(context.Context, *WatchState) (*WatchStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchStatus not implemented")
}
func (UnimplementedGreeterServer) WatchUpdate(context.Context, *WatchUpdates) (*WatchStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUpdate not implemented")
}
func (UnimplementedGreeterServer) GetProject(context.Context, *ProjectRequest) (*ProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedGreeterServer) SetFileInfo(context.Context, *SetFileInfoRequest) (*SetFileInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileInfo not implemented")
}
func (UnimplementedGreeterServer) FindSubFile(context.Context, *GetFindFileInfoRequest) (*GetFindFileInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSubFile not implemented")
}
func (UnimplementedGreeterServer) PutFileInfo(context.Context, *PutFileInfoRequest) (*PutFileInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFileInfo not implemented")
}
func (UnimplementedGreeterServer) DeleteFileInfo(context.Context, *RemoveFileInfoRequest) (*RemoveFileInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileInfo not implemented")
}
func (UnimplementedGreeterServer) SubFileCount(context.Context, *SubFileCountRequest) (*SubFileCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubFileCount not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_WatchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).WatchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/WatchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).WatchStatus(ctx, req.(*WatchState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_WatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).WatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/WatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).WatchUpdate(ctx, req.(*WatchUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/SetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SetFileInfo(ctx, req.(*SetFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_FindSubFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFindFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).FindSubFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/FindSubFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).FindSubFile(ctx, req.(*GetFindFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_PutFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).PutFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/PutFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).PutFileInfo(ctx, req.(*PutFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DeleteFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DeleteFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/DeleteFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DeleteFileInfo(ctx, req.(*RemoveFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SubFileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubFileCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SubFileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greeter/SubFileCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SubFileCount(ctx, req.(*SubFileCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchStatus",
			Handler:    _Greeter_WatchStatus_Handler,
		},
		{
			MethodName: "WatchUpdate",
			Handler:    _Greeter_WatchUpdate_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Greeter_GetProject_Handler,
		},
		{
			MethodName: "SetFileInfo",
			Handler:    _Greeter_SetFileInfo_Handler,
		},
		{
			MethodName: "FindSubFile",
			Handler:    _Greeter_FindSubFile_Handler,
		},
		{
			MethodName: "PutFileInfo",
			Handler:    _Greeter_PutFileInfo_Handler,
		},
		{
			MethodName: "DeleteFileInfo",
			Handler:    _Greeter_DeleteFileInfo_Handler,
		},
		{
			MethodName: "SubFileCount",
			Handler:    _Greeter_SubFileCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/iot.proto",
}
